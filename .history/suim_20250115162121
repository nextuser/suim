#!/bin/bash

set -e

# 配置目录
BASE_DIR="$HOME/.suim"
VERSIONS_DIR="$BASE_DIR/versions"
CURRENT_VERSION_FILE="$BASE_DIR/current"

# 创建必要的目录
mkdir -p "$VERSIONS_DIR"

# 获取系统信息
get_os_arch() {
    local os="ubuntu"
    local arch="x86_64"
    echo "${os}-${arch}"
}

# 列出已安装的版本
list_versions() {
    if [ ! -d "$VERSIONS_DIR" ] || [ -z "$(ls -A "$VERSIONS_DIR")" ]; then
        echo "No versions installed"
        return
    fi

    local current_version=""
    if [ -f "$CURRENT_VERSION_FILE" ]; then
        current_version=$(cat "$CURRENT_VERSION_FILE")
    fi

    for version in "$VERSIONS_DIR"/*; do
        if [ -d "$version" ]; then
            version_name=$(basename "$version")
            if [ "$version_name" = "$current_version" ]; then
                echo "* $version_name (current)"
            else
                echo "  $version_name"
            fi
        fi
    done
}

# 显示当前版本
show_version() {
    if [ -f "$CURRENT_VERSION_FILE" ]; then
        echo "Current version: $(cat "$CURRENT_VERSION_FILE")"
    else
        echo "No version currently selected"
    fi
}

# 获取远程版本列表
list_remote_versions() {
    echo "Fetching available versions..."
    local versions=$(curl -s https://api.github.com/repos/MystenLabs/sui/releases | \
        grep '"tag_name":' | \
        awk -F'"' '{print $4}' | \
        sort -Vr | \
        uniq)
    
    if [ -z "$versions" ]; then
        echo "Failed to fetch versions"
        return 1
    fi

    echo "Available versions:"
    echo "$versions"
}

# 安装指定版本
install_version() {
    local version=$1
    local os_arch=$(get_os_arch)
    local install_dir="$VERSIONS_DIR/$version"
    local download_url="https://github.com/MystenLabs/sui/releases/download/$version/sui-$version-$os_arch.tgz"
    local temp_file="/tmp/sui-$version.tgz"

    echo "Installing Sui $version..."
    
    # 检查版本是否已安装
    if [ -d "$install_dir" ]; then
        echo "Version $version is already installed"
        return 1
    fi

    # 创建临时安装目录
    mkdir -p "$install_dir"

    # 下载文件并显示进度
    echo "Downloading from $download_url"
    curl -L --progress-bar "$download_url" -o "$temp_file" || {
        echo "Download failed"
        rm -rf "$install_dir"
        rm -f "$temp_file"
        return 1
    }

    # 解压文件
    tar -xzf "$temp_file" -C "$install_dir" || {
        echo "Extraction failed"
        rm -rf "$install_dir"
        rm -f "$temp_file"
        return 1
    }

    # 清理临时文件
    rm -f "$temp_file"

    echo "Successfully installed Sui $version"
    
    # 如果是第一次安装，自动使用该版本
    if [ ! -f "$CURRENT_VERSION_FILE" ]; then
        use_version "$version"
    fi
}

# 切换版本
use_version() {
    local version=$1
    local install_dir="$VERSIONS_DIR/$version"

    if [ ! -d "$install_dir" ]; then
        echo "Version $version is not installed"
        return 1
    fi

    if [ ! -f "$install_dir/sui" ]; then
        echo "Error: sui executable not found for version $version"
        return 1
    fi

    # 创建软链接
    mkdir -p "$HOME/.local/bin"
    ln -sf "$install_dir/sui" "$HOME/.local/bin/sui"
    echo "$version" > "$CURRENT_VERSION_FILE"
    echo "Now using sui $version"

    # 检查 PATH 设置
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        echo "Please add '$HOME/.local/bin' to your PATH"
        echo "Add this line to your ~/.bashrc or ~/.zshrc:"
        echo 'export PATH="$HOME/.local/bin:$PATH"'
    fi
}

# 卸载版本
uninstall_version() {
    local version=$1
    local install_dir="$VERSIONS_DIR/$version"

    if [ ! -d "$install_dir" ]; then
        echo "Version $version is not installed"
        return 1
    fi

    # 检查是否是当前使用的版本
    if [ -f "$CURRENT_VERSION_FILE" ] && [ "$(cat "$CURRENT_VERSION_FILE")" = "$version" ]; then
        rm -f "$CURRENT_VERSION_FILE"
        rm -f "$HOME/.local/bin/sui"
    fi

    rm -rf "$install_dir"
    echo "Uninstalled Sui $version"
}

# 主命令处理
case "$1" in
    "list")
        list_versions
        ;;
    "version")
        show_version
        ;;
    "version-remote")
        list_remote_versions
        ;;
    "install")
        if [ -z "$2" ]; then
            echo "Please specify a version to install"
            exit 1
        fi
        install_version "$2"
        ;;
    "use")
        if [ -z "$2" ]; then
            echo "Please specify a version to use"
            exit 1
        fi
        use_version "$2"
        ;;
    "uninstall")
        if [ -z "$2" ]; then
            echo "Please specify a version to uninstall"
            exit 1
        fi
        uninstall_version "$2"
        ;;
    *)
        echo "Usage: suim {list|version|version-remote|install <version>|use <version>|uninstall <version>}"
        exit 1
        ;;
esac