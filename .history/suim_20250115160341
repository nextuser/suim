#!/bin/bash

# 定义 Sui 版本存储目录
SUIM_HOME="$HOME/.suim"
VERSIONS_DIR="$SUIM_HOME/versions"
CURRENT_VERSION_FILE="$SUIM_HOME/current"

# 创建必要的目录
mkdir -p "$VERSIONS_DIR"

# 获取当前操作系统和架构
if [ "$(uname)" == "Darwin" ]; then
    OS="macos"
else
    OS="ubuntu"
fi
ARCH="x86_64"

# 获取远程可下载的 Sui 版本列表
fetch_remote_versions() {
    echo "Fetching available versions..."
    wget -qO- https://api.github.com/repos/MystenLabs/sui/releases | \
    grep -o '"tag_name": "[^"]*' | \
    cut -d'"' -f4 | \
    sort -u | \
    while read version; do
        # 保留完整版本名称（包含 mainnet/testnet 前缀）
        echo "$version"
    done
}

# 列出已安装的 Sui 版本
list_installed_versions() {
    echo "Installed versions:"
    if [ -f "$CURRENT_VERSION_FILE" ]; then
        current=$(cat "$CURRENT_VERSION_FILE")
        for version in $(ls "$VERSIONS_DIR"); do
            if [ "$version" = "$current" ]; then
                echo "* $version (current)"
            else
                echo "  $version"
            fi
        done
    else
        ls "$VERSIONS_DIR" 2>/dev/null || echo "No versions installed"
    fi
}

# 显示当前版本
show_current_version() {
    if [ -f "$CURRENT_VERSION_FILE" ]; then
        echo "Current version: $(cat "$CURRENT_VERSION_FILE")"
    else
        echo "No version currently in use"
    fi
}

# 安装指定版本
install_version() {
    local version=$1
    local install_dir="$VERSIONS_DIR/$version"
    local download_url="https://github.com/MystenLabs/sui/releases/download/${version}/sui-${version}-${OS}-${ARCH}.tgz"
    
    if [ -d "$install_dir" ]; then
        echo "Version $version is already installed"
        return
    fi

    echo "Downloading $version..."
    echo "Download URL: $download_url"
    mkdir -p "$install_dir"
    
    # 添加 -v 参数显示详细信息，--show-progress 显示进度
    if wget -v --show-progress --tries=3 --timeout=15 -O "$install_dir/sui.tgz" "$download_url" 2>&1; then
        echo "Extracting files..."
        tar -xzf "$install_dir/sui.tgz" -C "$install_dir"
        rm "$install_dir/sui.tgz"
        
        if [ ! -f "$install_dir/sui" ]; then
            echo "Error: sui executable not found in the downloaded package"
            rm -rf "$install_dir"
            return 1
        fi
        
        chmod +x "$install_dir/sui"
        echo "Successfully installed $version"
    else
        echo "Failed to download from: $download_url"
        echo "Please check if the version exists and you have internet connection"
        rm -rf "$install_dir"
        return 1
    fi
}

# 切换版本
use_version() {
    local version=$1
    local install_dir="$VERSIONS_DIR/$version"

    if [ ! -d "$install_dir" ]; then
        echo "Version $version is not installed"
        return 1
    fi

    if [ ! -f "$install_dir/sui" ]; then
        echo "Error: sui executable not found for version $version"
        return 1
    fi

    mkdir -p "$HOME/.local/bin"
    ln -sf "$install_dir/sui" "$HOME/.local/bin/sui"
    echo "$version" > "$CURRENT_VERSION_FILE"
    echo "Now using sui $version"

    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        echo "Please add '$HOME/.local/bin' to your PATH"
        echo "Add this line to your ~/.bashrc or ~/.zshrc:"
        echo 'export PATH="$HOME/.local/bin:$PATH"'
    fi
}

# 卸载版本
uninstall_version() {
    local version=$1
    local install_dir="$VERSIONS_DIR/$version"

    if [ ! -d "$install_dir" ]; then
        echo "Version $version is not installed"
        return 1
    fi

    if [ -f "$CURRENT_VERSION_FILE" ] && [ "$(cat "$CURRENT_VERSION_FILE")" = "$version" ]; then
        echo "Cannot uninstall current version. Please switch to another version first"
        return 1
    fi

    rm -rf "$install_dir"
    echo "Uninstalled $version"
}

# 主命令处理
case "$1" in
    list)
        list_installed_versions
        ;;
    version)
        show_current_version
        ;;
    version-remote)
        echo "Available remote versions:"
        fetch_remote_versions
        ;;
    install)
        if [ -z "$2" ]; then
            echo "Usage: suim install <version>"
            exit 1
        fi
        install_version "$2"
        ;;
    use)
        if [ -z "$2" ]; then
            echo "Usage: suim use <version>"
            exit 1
        fi
        use_version "$2"
        ;;
    uninstall)
        if [ -z "$2" ]; then
            echo "Usage: suim uninstall <version>"
            exit 1
        fi
        uninstall_version "$2"
        ;;
    *)
        echo "Usage: suim {list|version|version-remote|install|use|uninstall} [version]"
        echo
        echo "Commands:"
        echo "  list           List installed versions"
        echo "  version        Show current version"
        echo "  version-remote List available remote versions"
        echo "  install        Install a specific version"
        echo "  use           Switch to a specific version"
        echo "  uninstall     Remove a specific version"
        exit 1
        ;;
esac