#!/bin/bash

SUIM_HOME="$HOME/.suim"
VERSIONS_DIR="$SUIM_HOME/versions"
CURRENT_VERSION_FILE="$SUIM_HOME/current"

# Create necessary directories
mkdir -p "$VERSIONS_DIR"

# Get current system info
get_system_info() {
    echo "ubuntu-x86_64"
}

# Show current version
show_version() {
    if [ -f "$CURRENT_VERSION_FILE" ]; then
        cat "$CURRENT_VERSION_FILE"
    else
        echo "No version currently set"
    fi
}

# List installed versions
list_versions() {
    echo "Installed versions:"
    if [ -d "$VERSIONS_DIR" ]; then
        ls -1 "$VERSIONS_DIR"
    fi
}

# Get available remote versions
list_remote_versions() {
    echo "Fetching remote versions..."
    curl -s https://api.github.com/repos/MystenLabs/sui/releases | 
    grep '"tag_name":' | 
    sed -E 's/.*"([^"]+)".*/\1/' | 
    grep -E '^(mainnet|testnet|devnet)-' | 
    sort -u -r
}

# Download and install specified version
install_version() {
    local version=$1
    local system_info=$(get_system_info)
    local download_url="https://github.com/MystenLabs/sui/releases/download/${version}/sui-${version}-${system_info}.tgz"
    local target_dir="$VERSIONS_DIR/${version}"
    local temp_file="/tmp/sui-${version}.tgz"

    # Check if version is already installed
    if [ -d "$target_dir" ]; then
        echo "Version ${version} is already installed"
        return 1
    fi

    echo "Downloading ${version}..."
    wget --show-progress -O "$temp_file" "$download_url"

    if [ $? -eq 0 ]; then
        mkdir -p "$target_dir"
        tar xzf "$temp_file" -C "$target_dir"
        rm "$temp_file"
        echo "Installation complete: ${version}"
    else
        echo "Download failed"
        rm -f "$temp_file"
        rm -rf "$target_dir"
        return 1
    fi
}

# Switch to specified version
use_version() {
    local version=$1
    local version_dir="$VERSIONS_DIR/${version}"

    if [ ! -d "$version_dir" ]; then
        echo "Version ${version} is not installed"
        return 1
    fi

    echo "$version" > "$CURRENT_VERSION_FILE"
    echo "Switched to version: ${version}"
}

# Uninstall specified version
uninstall_version() {
    local version=$1
    local version_dir="$VERSIONS_DIR/${version}"

    if [ ! -d "$version_dir" ]; then
        echo "Version ${version} is not installed"
        return 1
    fi

    rm -rf "$version_dir"
    echo "Deleted version: ${version}"

    # Clear current version if it's the one being uninstalled
    if [ "$(cat "$CURRENT_VERSION_FILE" 2>/dev/null)" = "$version" ]; then
        rm -f "$CURRENT_VERSION_FILE"
    fi
}

# Main command handler
case "$1" in
    "list")
        list_versions
        ;;
    "version")
        show_version
        ;;
    "versions")
        list_remote_versions
        ;;
    "install")
        if [ -z "$2" ]; then
            echo "Please specify version to install"
            exit 1
        fi
        install_version "$2"
        ;;
    "use")
        if [ -z "$2" ]; then
            echo "Please specify version to use"
            exit 1
        fi
        use_version "$2"
        ;;
    "uninstall")
        if [ -z "$2" ]; then
            echo "Please specify version to uninstall"
            exit 1
        fi
        uninstall_version "$2"
        ;;
    *)
        echo "Usage:"
        echo "  suim list              # List installed versions"
        echo "  suim version           # Show current version"
        echo "  suim versions    # List available remote versions"
        echo "  suim install <version> # Install specified version"
        echo "  suim use <version>     # Switch to specified version"
        echo "  suim uninstall <version> # Uninstall specified version"
        echo "Example:"
        echo "suim install testnet-v1.40.1"
        echo "suim use testnet-v1.40.1"
        echo "suim uninstall testnet-v1.40.1"
        echo "suim versions | grep devnet"
        exit 1
        ;;
esac